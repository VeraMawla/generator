#exhaustive method! Not super efficient but she works ! 

# A function 
# that will generate all possible strings of digits (0...9) such 
#that each string has the length given as the first parameter, 
# and any two consecutive numbers within the string must have
# their product less or equal to the second parameter.


length = 4 
def pad_int(i, length):
    x = str(i) 
    x_len = len(x)
    dif= length-x_len
    
    x=('0'*dif)+x
    
    return x
    
product = 8
length = 2

def product_constraint(string, product):
    #Write a function that checks if a string 
    #passes our product constraint
    result=True
    
    for x in range(1,len(string)):
        if (int(string[x])*int(string[x-1]) > product):
          result=False
          break
    return result
        

# positive_tests = ['1232','4211','1324']
#negative_tests = ['991','1255','1419','99123']

# print('This should pass:')
# for test in positive_tests:
#     print(test, product_constraint(test, product))
    
#print('This should fail:')
#for test in negative_tests:
#    print(test, product_constraint(test, product))
    
    
    
def generator(length, product):
    
    #This is to store all strings that fall in the above description
    combinations=[]
    
    for i in range((10**length)):   
        generated = pad_int(i,length)
        if product_constraint(generated,product):
            combinations.append(generated)
    return (combinations)

print(generator(2, 8))
